Phase 0 – Party control room: the client keeps a persistent local roster/history, lets hosts compose dares, guides the live round flow, and celebrates results with trophy-room stats for in-person play (src/App.tsx:21, src/components/PlayerRoster.tsx:45, src/components/DareComposer.tsx:183, src/components/ActiveRoundStage.tsx:54, src/components/HistoryPanel.tsx:31, src/components/StatsPanel.tsx:90).
Phase 1 – Link-driven dares: feature-flagged invite creation, JWT-secured landing pages with SSE state, and commit–reveal resolution from open → accepted → resolved (README.md:122).
Phase 2 – Photo proofs: presigned uploads with checksum verification, background image processing, proof pages, and UI cues that surface proof tiles when enabled (README.md:138).
Phase 3 – Leaderboards & sharing: scheduled snapshot worker feeding cached leaderboard APIs/UI, proof-aware filters, and OG-rich share endpoints gated by client/server flags (README.md:225).
Phase 4 – Video proofs & moderation: ≤10s video uploads flow through rate-limited APIs, ffmpeg-backed workers, moderation + blur tooling, lifecycle cleanup, and updated infrastructure/docs (server/src/proofs.js, server/src/app.js, server/src/workers/proofProcessor.js, server/src/workers/proofLifecycle.js, src/components/ProofCaptureModal.tsx, k8s.yaml, README.md:240).
Phase 5 – Realtime hardening: WebSocket gateway with Redis fan-out, session token rotation, rate/backpressure enforcement, telemetry hooks, and Kubernetes canary/HPA/CDN updates while preserving SSE fallback (server/src/realtime, server/src/app.js, server/src/realtime/wsGateway.js, server/src/telemetry.js, src/realtime.ts, src/components/LinkDareInvitePage.tsx, k8s.yaml, README.md:262).
